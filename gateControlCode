#include <LiquidCrystal.h>
#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>

// UltraSonic instance parameters
#define echoPin 41
#define trigPin 42 
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

//RFID instance parameters for arduino Mega 2560
#define SS_PIN 53
#define RST_PIN 5
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

// Gate motor instance parameters
const int pwm = 6;
const int in_1 = 10;
const int in_2 = 39;

// Servo instance parameters
const int in_4 = 48;

// RGB led instance parameters
const int r = 8;
const int g = 7;
const int b = 9;

// Bluetooth instance parameters
char t;

// Servo instance parameters
Servo myServo;
int pos = 90;

// LCD instance parameters
// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 13, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// Keypad instance parameters
const int ROW_NUM = 4; //four rows
const int COLUMN_NUM = 4; //four columns
char keys[ROW_NUM][COLUMN_NUM] = {
  {'1','2','3', 'A'},
  {'4','5','6', 'B'},
  {'7','8','9', 'C'},
  {'*','0','#', 'D'}
};
byte pin_rows[ROW_NUM] = {29, 28, 27, 26}; //connect to the row pinouts of the keypad
byte pin_column[COLUMN_NUM] = {25, 24, 23, 22}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );

const String password = "7789"; // change your password here
String input_password;

// Button Control instance parameter
const int buttonPin = 47;

// MetalTouch gate stop control instance parameter
const int sensorOpen = 42;
const int sensorClose = 43;
const int relayOpen = 45;
const int relayClose = 44;
int statOpen;
int statClose;

void setup() {
  
  Serial.begin(9600);   // Initiate a serial communication
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  Serial.println("Approximate your card to the reader...");
  Serial.println();
  input_password.reserve(32); // maximum input characters is 33, change if needed
  
  pinMode(buttonPin, INPUT);
  pinMode(pwm,OUTPUT) ; //we have to set PWM pin as output
  pinMode(in_1,OUTPUT) ; //Logic pins are also set as output
  pinMode(in_2,OUTPUT) ;
  pinMode(in_4, OUTPUT);
  pinMode(r, OUTPUT);
  pinMode(g, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode (sensorOpen, INPUT);
  pinMode (sensorClose, INPUT);
  pinMode (relayOpen, OUTPUT);
  pinMode (relayClose, OUTPUT);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT

  myServo.attach(46);
  digitalWrite(g, HIGH);
  digitalWrite(r, LOW);
  digitalWrite(b, LOW);

  // set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
  
  // Print a message to the LCD.
  lcd.print("System Available");
  delay(5000);
}

void loop() {
  // RFID system call
  rfidCall();
  
  // set the cursor to column 0, line 1
  // (note: line 1 is the second row, since counting begins with 0):
  lcd.setCursor(0, 0);

  // Bluetooth system call
  bluetoothCall();

  // Keypad system call
  keypadCall();

  // Button system call
  //buttonCall();

  // MetalTouch system call
  metalTouchCall();

  // Ultrasonic system call
  //ultraSonicGateClose();
}

// UltraSonic GateClose Control function here
void ultraSonicGateClose()
{
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delay(100);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delay(500);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  if(distance <= 10)
  {
    Serial.println("Incoming Auto");
    Serial.println("Gate Open");
  }
  else if(distance <= 100 && b == HIGH)
  {
    Serial.println("Close Gate");
    _dropBar();
  }
}

// MetalTouch Control function here
void metalTouchCall()
{
  statOpen = digitalRead (sensorOpen);
  statClose = digitalRead (sensorClose);
  if (statOpen == HIGH)
  {
    digitalWrite (relayOpen, HIGH);
    analogWrite(in_1, 0);
    analogWrite(in_4, 0);
  }
  else
  {
    digitalWrite (relayOpen, LOW);
    analogWrite(in_1, 0);
    analogWrite(in_4, 0);
  }

  if (statClose == HIGH)
  {
    digitalWrite (relayClose, HIGH);
    analogWrite(in_1, 0);
    analogWrite(in_4, 0);
  }
  else
  {
    digitalWrite (relayClose, LOW);
    analogWrite(in_1, 0);
    analogWrite(in_4, 0);
  }
}

// Button Control function here
void buttonCall()
{
  if (digitalRead(buttonPin) == HIGH)
  {
    _raiseBar();
    digitalWrite(buttonPin, LOW);
  }
  else if (digitalRead(buttonPin) == HIGH && r == LOW)
  {
    _dropBar(); 
    digitalWrite(buttonPin, LOW);
  }
  
}

// Keypad function here
void keypadCall()
{
  char key = keypad.getKey();

  if (key){
    Serial.println(key);
    lcd.setCursor(0, 1);
    lcd.print(key);
      if(key == '*') {
      input_password = ""; // clear input password
    } else if(key == '#') {
      if(password == input_password) {
        Serial.println("password is correct");
         _raiseBar();
         _moveLeft(1);
         //digitalWrite(b, HIGH);
       }
       else
       {
        Serial.println("password is incorrect, try again");
        _dropBar();
        _moveRight(1);
        //digitalWrite(b, LOW);
      }

      input_password = ""; // clear input password
    } else {
      input_password += key; // append new character to input password string
    }
  }
}

// RFID function here
void rfidCall()
{
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  if (content.substring(1) == "C5 BB 39 23") //change here the UID of the card/cards that you want to give access
  {
    Serial.println("Authorized access");
    Serial.println();
    _raiseBar();
    _moveLeft(1);
    //delay(3000);
  }
 
 else   {
    Serial.println(" Access denied");
    _dropBar();
    _moveRight(1);
    //delay(3000);
  }

}

// Bluetooth control function
void bluetoothCall()
{
    if (Serial.available()) {
    t = Serial.read();
    
    switch (t) {
      case 'F':
        _raiseBar();
        break;
      case 'B':
        _dropBar();
        break;
      case 'L':
        _moveLeft(1);
        break;
      case 'R':
        _moveRight(1);
        break;    
    }
  }
}

// Gate control function
void _raiseBar()
{
  analogWrite(pwm, 50);
  analogWrite(in_4, 0);
  digitalWrite(g, HIGH);
  digitalWrite(r, LOW);
  digitalWrite(b, LOW);
  analogWrite(in_1, 30);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Open");
  for( pos = 90; pos <= 180; pos += 45)
  {
     myServo.write(pos);
     //delay(1);
  }
}

void _dropBar()
{
  analogWrite(pwm, 50);
  analogWrite(in_1, 0);
  analogWrite(in_4, 30);
  digitalWrite(g, LOW);
  digitalWrite(r, HIGH);
  digitalWrite(b, LOW);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Close");
  for( pos = 180; pos >= 90; pos -= 45)
  {
    myServo.write(pos);
    //delay(1);
  }
}

void _moveLeft(int duration)
{
  analogWrite(pwm, 50);
  analogWrite(in_4, 0);
  analogWrite(in_1, 30);
  digitalWrite(g, HIGH);
  digitalWrite(r, LOW);
  digitalWrite(b, LOW);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Open");
}

void _moveRight(int duration)
{
  analogWrite(in_1, 0);
  analogWrite(in_4, 30);
  digitalWrite(g, LOW);
  digitalWrite(r, HIGH);
  digitalWrite(b, LOW);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Close");
}
