#include <LiquidCrystal.h>
#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 53
#define RST_PIN 5
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

const int in_1 = 10 ;
const int in_2 = 9 ;
const int in_3 = 8 ;
char t;
Servo myServo;

int pos = 90;
//For providing logic to L298 IC to choose the direction of the DC motor

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 13, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
#include <Servo.h>
Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards
int pos = 0;    // variable to store the servo position
#define echoPin 40 // attach pin D2 Arduino to pin Echo of HC-SR04
#define trigPin 42 //attach pin D3 Arduino to pin Trig of HC-SR04
#define BUTTON_PIN 43

// defines variables
long duration; // variable for the duration of sound wave travel
int distance; // variable for the distance measurement

#include <Keypad.h>

const int ROW_NUM = 4; //four rows
const int COLUMN_NUM = 4; //three columns

char keys[ROW_NUM][COLUMN_NUM] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};

byte pin_rows[ROW_NUM] = {29, 28, 27, 26}; //connect to the row pinouts of the keypad
byte pin_column[COLUMN_NUM] = {25, 24, 23,22}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );

const String password = "7789"; // change your password here
String input_password;
void setup() {

  Serial.begin(9600);   // Initiate a serial communication
  pinMode(BUTTON_PIN, INPUT);
  input_password.reserve(32); // maximum input characters is 33, change if needed
  myservo.attach(11);
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT

  
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  Serial.println("Approximate your card to the reader...");
  Serial.println();
  
   //pinMode(pwm,OUTPUT) ; //we have to set PWM pin as output
   pinMode(in_1,OUTPUT) ; //Logic pins are also set as output
   pinMode(in_2,OUTPUT) ;
   pinMode(in_3, OUTPUT);

   myServo.attach(7);

   // set up the LCD's number of columns and rows:
   lcd.begin(16, 2);
   // Print a message to the LCD.
   lcd.print("hello, ESD!");
   delay(5000);
}

void loop() {
      // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  //Serial.print("Distance: ");
 //Serial.print(distance);
 //Serial.println(" cm");
 //delay(1000);
  char key = keypad.getKey();

  if (key){
    Serial.println(key);

    if(key == '*') {
      input_password = ""; // clear input password
    } else if(key == '#') {
      if(password == input_password) {
        Serial.println("password is correct");
        lcd.print("password is correc");
         myservo.write(180); 
//          for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
//    // in steps of 1 degree
//       myservo.write(pos);              // tell servo to go to position in variable 'pos'
//    delay(30);                       // waits 15 ms for the servo to reach the position
//    
//  }
   delay(5000);
   myservo.write(90);
//  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
//    myservo.write(pos);              // tell servo to go to position in variable 'pos'
//    delay(30);                       // waits 15 ms for the servo to reach the position
// }
      } else {
        Serial.println("password is incorrect, try again");
        lcd.print("password is incorrect, try again");
      }

      input_password = ""; // clear input password
    } else {
      input_password += key; // append new character to input password string
    }
  }
   if (digitalRead(BUTTON_PIN) == HIGH) {
   myservo.write(180);
  }
   if (distance <=10){
      myservo.write(180);
      delay(300);
      myservo.write(90);
     }

  

  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  if (content.substring(1) == "C5 BB 39 23") //change here the UID of the card/cards that you want to give access
  {
    Serial.println("Authorized access");
    Serial.println();
    _moveForward();
    delay(3000);
  }
 
 else   {
    Serial.println(" Access denied");
    _moveReverse();
    delay(3000);
  }

  
   // set the cursor to column 0, line 1
   // (note: line 1 is the second row, since counting begins with 0):
   lcd.setCursor(0, 0);

   if (Serial.available()) {
    t = Serial.read();
    //Serial.println(command);
    //_brake(); //initialize with motors stoped
    //Change pin mode only if new command is different from previous.
    //Serial.println(command);
    
    switch (t) {
      case 'F':
        _moveForward();
        break;
      case 'B':
        _moveReverse();
        break;
      case 'L':
        _moveLeft(1);
        break;
      case 'R':
        _moveRight(1);
        break;    
    }
  }
}

//Move Car Functions
void _moveForward()
{
  digitalWrite(in_3, LOW);
  digitalWrite(in_1, HIGH);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Open");
  for( pos = 90; pos <= 180; pos += 45)
  {
     myServo.write(pos);
     //delay(1);
  }
}

void _moveReverse()
{
  digitalWrite(in_1, LOW);
  digitalWrite(in_3, HIGH);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Close");
  for( pos = 180; pos >= 90; pos -= 45)
  {
    myServo.write(pos);
    //delay(1);
  }
}

void _moveLeft(int duration)
{
  digitalWrite(in_2, LOW) ;
}

void _moveRight(int duration)
{
  digitalWrite(in_2, HIGH) ;
}
