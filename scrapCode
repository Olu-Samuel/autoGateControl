#include <LiquidCrystal.h>
#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 53
#define RST_PIN 5
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

const int in_1 = 10 ;
const int in_2 = 9 ;
const int in_3 = 8 ;
char t;
Servo myServo;

int pos = 90;
//For providing logic to L298 IC to choose the direction of the DC motor

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 12, en = 11, d4 = 13, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

void setup() {

  Serial.begin(9600);   // Initiate a serial communication
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  Serial.println("Approximate your card to the reader...");
  Serial.println();
  
   //pinMode(pwm,OUTPUT) ; //we have to set PWM pin as output
   pinMode(in_1,OUTPUT) ; //Logic pins are also set as output
   pinMode(in_2,OUTPUT) ;
   pinMode(in_3, OUTPUT);

   myServo.attach(7);

   // set up the LCD's number of columns and rows:
   lcd.begin(16, 2);
   // Print a message to the LCD.
   lcd.print("hello, ESD!");
   delay(5000);
}

void loop() {

  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  if (content.substring(1) == "C5 BB 39 23") //change here the UID of the card/cards that you want to give access
  {
    Serial.println("Authorized access");
    Serial.println();
    _moveForward();
    delay(3000);
  }
 
 else   {
    Serial.println(" Access denied");
    _moveReverse();
    delay(3000);
  }

  
   // set the cursor to column 0, line 1
   // (note: line 1 is the second row, since counting begins with 0):
   lcd.setCursor(0, 0);

   if (Serial.available()) {
    t = Serial.read();
    //Serial.println(command);
    //_brake(); //initialize with motors stoped
    //Change pin mode only if new command is different from previous.
    //Serial.println(command);
    
    switch (t) {
      case 'F':
        _moveForward();
        break;
      case 'B':
        _moveReverse();
        break;
      case 'L':
        _moveLeft(1);
        break;
      case 'R':
        _moveRight(1);
        break;    
    }
  }
}

//Move Car Functions
void _moveForward()
{
  digitalWrite(in_3, LOW);
  digitalWrite(in_1, HIGH);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Open");
  for( pos = 90; pos <= 180; pos += 45)
  {
     myServo.write(pos);
     //delay(1);
  }
}

void _moveReverse()
{
  digitalWrite(in_1, LOW);
  digitalWrite(in_3, HIGH);
  lcd.clear();
  lcd.print("P. Gate: ");
  lcd.setCursor(8, 0);
  lcd.print("Close");
  for( pos = 180; pos >= 90; pos -= 45)
  {
    myServo.write(pos);
    //delay(1);
  }
}

void _moveLeft(int duration)
{
  digitalWrite(in_2, LOW) ;
}

void _moveRight(int duration)
{
  digitalWrite(in_2, HIGH) ;
}
